
General:
- if cmdline arg is a file, parse it as gtp, then drop to stdin

Detect win races
- look for a forced win when only using virtual connections


Faster win detection:
- keep count of number of corners/edges, not just the flags
- for rings
  - make sure the two neighbours are not also next to each other, ie make sure you didn't just create a triangle
  - minimal number of ways a ring can form, check neighbour patterns

MCTS
- use heuristic initialization of nodes
- use weighted random choices instead of uniform random:
  - different weights for black vs white?
  - values based on:
    - empty, direct neighbour, potential virtual connection neighbours, 2nd corner
    - virtual connection points (0,1,2)
    - edge/corner, near edge/corner, empty space
  - analyze games to determine these values
  - a position near the edge/corner defines virtual connections to the wall
- RAVE
  - store rave value in each tree node
  - store move list during simulation
  - on the way back up the tree, incr rave value for each child of nodes in the tree
    - if win, incr rave value for each move we made in the tree
    - if loss, incr rave value for each move opponent made in the tree
  - low accuracy, so devalue over time
    - test different ravefactors, and other ways of devaluing the score
- roll-outs don't need to be good games, only increase correlation between current position and outcome

Heuristic:
- colorness - how black/white a cell is
  - +3 points for each direct neighbour
  - +2 points for virtual connection
  - +1 point for each in second ring
- contentious
  - (24 - abs(colorness))*(number of pieces in neighbourhood)
- order moves by contentiousness
- dead move analysis


