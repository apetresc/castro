
General:
- if cmdline arg is a file, parse it as gtp, then drop to stdin

Detect win races
- look for a forced win when only using virtual connections


Faster win detection:
- keep count of number of corners/edges, not just the flags
- for rings:
  - only a few ways rings can form:
    - if two neighbours are next to each other, it is just a triangle and not a ring - done
    - 3-5 next to each other *might* be a ring, but might not be
    - if two distinct groupings are part of the same group, it is a ring
  - build a lookup table 2^6 big that returns yes/no/maybe for whether it is a ring

MCTS
- use heuristic initialization of nodes
- use weighted random choices instead of uniform random:
  - different weights for black vs white?
  - values based on:
    - empty, direct neighbour, potential virtual connection neighbours, 2nd corner
    - virtual connection points (0,1,2)
    - edge/corner, near edge/corner, empty space
  - analyze games to determine these values
  - a position near the edge/corner defines virtual connections to the wall
- roll-outs don't need to be good games, only increase correlation between current position and outcome
- save the partial tree for the next gen_move
- do a small solve, and use that as initial weights for move ordering

Heuristic:
- colorness - how black/white a cell is
  - +3 points for each direct neighbour
  - +2 points for virtual connection
  - +1 point for each in second ring
- contentious
  - (24 - abs(colorness))*(number of pieces in neighbourhood)
- order moves by contentiousness
- dead move analysis


